Stefano Tommasini						7278080
Alessandro Wagner		        6850476
===========================================================

===========================================================
1. Sobre a linguagem escolhida
===========================================================

	Optamos implementar o EP na linguagem python, versão 3.
Normalmente disponível em /usr/bin/python3.
Um shebang foi colocado no início de cada código para chamar
diretamente o script com ./servidor.py por exemplo. 

	Escolhemos esta linguagem pela facilidade da manipulação
de sockets e de strings.

===========================================================
2. Rodando o Servidor e o Cliente
===========================================================

Para executar o servidor:
./servidor.py <port>
  Onde port é a porta que será utilizada
Ex: ./servidor.py 8008


Para rodar o cliente:
./cliente.sh [tcp|udp] <ip> <port> <chatport>
  Onde [tcp|udp] é o protocolo a ser utilizado, ip é o ip
do cliente, port é a porta que será utilizada para
comunicação com o servidor e chatport é a porta utilizada
para fazer o chat.
Ex: ./cliente.sh tcp localhost 8008 5000

  Utilizamos um bash script simples para chamar o script
python correto (udp ou tcp), separando o código do cliente
em 3 arquivos distintos (cliente_udp.py, cliente_tcp.py e o
script seletor cliente.sh)
  Além disso, não utilizamos um Makefile por não ser
necessário compilar os scripts da linguagem Python.

===========================================================
3. Arquivo tar.gz
===========================================================

	O arquivo compactado consiste em:
	cliente.sh (script seletor do cliente)
	cliente_udp.py (código do cliente udp)
	cliente_tcp.py (código do cliente tcp)
	servidor.py (codigo so servidor)
	LEIAME
	slides.pdf
	server.csr
	server.key
	server.crt
	Os três últimos são arquivos de certificado e chave rsa,
necessários para construir o socket SSL.

===========================================================
4. Log
===========================================================
  
	O servidor tem um log que estará no arquivo log.txt.
	
===========================================================
6. Usando o cliente
===========================================================

	O servidor reconhece os seguintes comandos:
	
- login 
	Utilizado para o usuário fazer login no servidor, este comando irá 
	pedir um nickname.
- logout:
	Utilizado para desconectar o usuário do servidor.
- list:
	Utilizado para listar todos os usuarios online, que estão 
conectados no mesmo protocolo.
- chat
	Utilizado para começar um chat com com outro usuario
- quit/exit:
  Utilizado para desconectar do servidor.

- DISCONNECT :
	Utilizado para terminar a conversa atual.

-FILE <nome_do_arquivo> 
	Utilizado para enviar <nome_do_arquivo>.
	
